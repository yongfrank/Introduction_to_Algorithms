/*
  http://47.96.116.66/problem.php?cid=2636&pid=1
  
  Description
     作为《狂扁小朋友》里面被狂扁的小朋友们，早就受不了这口气了。他们决定联合起来狂扁一次大朋友
      在一个长为n，宽为m的长方形社区里，有着大朋友和小朋友两类人(大朋友用"N"表示，小朋友用"n"表示)。 若两个小朋友之间的直线距离为1时，这两个小朋友便可以联合起来。
      现在一个社区地图上给你一个起始坐标(x,y)， 求从这个地方开始最多能联合到多少小朋友。
  
  Input
      第一行是两个整数 n,m (1≤n,m≤1000)
      第二行开始是n*m大小的地图 (仅包含字符"N"和"n")
      然后是两个整数 x,y (1≤x≤n,1≤y≤m)
  
  Output
  输出能联合的最多小朋友数
  
  Sample Input Copy
  【样例1输入】
  5 6
  NNNNNN
  NnNnNN
  nNnnnN
  nnNNnn
  NNNnnN
  3 1
  【样例2输入】
  5 6
  NNNNNN
  NnNnNN
  nNnnnN
  nnNNnn
  NNNnnN
  2 4
  【样例3输入】
  5 6
  NNNNNN
  NnNnNN
  nNnnnN
  nnNNnn
  NNNnnN
  1 1
  
  Sample Output Copy
  【样例1输出】
  3
  【样例2输出】
  8
  【样例3输出】
  0
*/

#include <iostream>
#include <cstdio>
#include <queue>

using namespace std;

int sizex, sizey, startx, starty; //圖的大小，起點橫縱座標。
int tempx, tempy;
int sum = 0;
char m[2000][2000];
int vis[2000][2000];
int dirx[4] = {0, 1, 0, -1};
int diry[4] = {1, 0, -1, 0};

struct point{
    int x;
    int y;
};

queue <point> r;

void bfs() {
    point temp;
    temp.x = startx; temp.y = starty;
    r.push(temp);
    if (m[startx][starty] == 'n') sum++;
    vis[startx][starty] = 1;
    
    while (!r.empty()){
        if (m[startx][starty] == 'N') break;
        
        //往四周搜索，可以聯合的結果加一。
        for (int i = 0; i < 4; i++) {
            int tempx = r.front().x, tempy = r.front().y;
            tempx += dirx[i]; tempy += diry[i];
            if (vis[tempx][tempy] == 0 && m[tempx][tempy] == 'n') {
                sum++;
                temp.x = tempx; temp.y = tempy;
                r.push(temp);
                vis[tempx][tempy] = 1;
            }
        }
        r.pop();
    }
    
}

int main() {
    cin >> sizex >> sizey;
    
    for (int i = 1; i <= sizex; i++) {
        for (int j = 1; j <= sizey; j++){
            vis[i][j] = 0;
            cin >> m[i][j];
        }
    }
    
    cin >> startx >> starty;
    
    bfs();
    cout << sum << endl;
}
